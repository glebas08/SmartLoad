@model SmartLoad.Models.Rout

@{
    ViewData["Title"] = "Редактировать маршрут";
}

<h1>Редактировать маршрут</h1>

<form asp-action="EditRoute" method="post">
    <input type="hidden" asp-for="Id" />
    <div class="form-group">
        <label asp-for="Name" class="control-label"></label>
        <input asp-for="Name" class="form-control" />
        <span asp-validation-for="Name" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="DepartureDate" class="control-label"></label>
        <input asp-for="DepartureDate" class="form-control" type="date" />
        <span asp-validation-for="DepartureDate" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="ArrivalDate" class="control-label"></label>
        <input asp-for="ArrivalDate" class="form-control" type="date" />
        <span asp-validation-for="ArrivalDate" class="text-danger"></span>
    </div>

    <!-- Таблица для точек маршрута -->
    <h2>Точки маршрута</h2>
    <table class="table">
        <thead>
            <tr>
                <th>Название точки</th>
                <th>Заказ</th>
                <th>Порядок</th>
                <th>Действия</th>
            </tr>
        </thead>
        <tbody id="routePointsTableBody">
            @if (Model.RoutePointMappings != null)
            {
                @foreach (var mapping in Model.RoutePointMappings.OrderBy(rpm => rpm.OrderInRoute))
                {
                    <tr>
                        <td>
                            <select name="selectedRoutePointIds" class="form-control routePointSelect" onchange="updateOrder(this)">
                                <option value="">Выберите точку маршрута</option>
                                @foreach (var routePoint in ViewBag.AvailableRoutePoints as List<SmartLoad.Models.RoutePoint>)
                                {
                                    @if (routePoint.Id == mapping.RoutePointId)
                                    {
                                        <option value="@routePoint.Id" selected>@routePoint.Name</option>
                                    }
                                    else
                                    {
                                        <option value="@routePoint.Id">@routePoint.Name</option>
                                    }
                                }
                                @{
                                    // Проверяем, есть ли текущая точка маршрута в списке доступных
                                    bool isCurrentPointInAvailable = false;
                                    var availablePoints = ViewBag.AvailableRoutePoints as List<SmartLoad.Models.RoutePoint>;
                                    if (availablePoints != null)
                                    {
                                        foreach (var rp in availablePoints)
                                        {
                                            if (rp.Id == mapping.RoutePointId)
                                            {
                                                isCurrentPointInAvailable = true;
                                                break;
                                            }
                                        }
                                    }

                                    // Если текущей точки нет в списке доступных, добавляем её отдельно
                                    if (!isCurrentPointInAvailable && mapping.RoutePoint != null)
                                    {
                                        <option value="@mapping.RoutePointId" selected>@mapping.RoutePoint.Name</option>
                                    }
                                }
                            </select>
                        </td>
                        <td>
                            @{
                                string orderName = "";
                                int orderId = 0;
                                if (mapping.RoutePoint != null && mapping.RoutePoint.Orders != null && mapping.RoutePoint.Orders.Any())
                                {
                                    var firstOrder = mapping.RoutePoint.Orders.FirstOrDefault();
                                    if (firstOrder != null)
                                    {
                                        orderName = firstOrder.Name;
                                        orderId = firstOrder.Id;
                                    }
                                }
                            }
                            <input type="text" class="form-control orderName" readonly value="@orderName" />
                            <input type="hidden" class="orderId" value="@orderId" />
                        </td>
                        <td>
                            <input type="number" name="orderInRoute" class="form-control orderNumber" value="@mapping.OrderInRoute" min="1" />
                        </td>
                        <td>
                            <button type="button" class="btn btn-danger removeRoutePointRow">Удалить</button>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>

    <button type="button" class="btn btn-success" id="addRoutePointRow">Добавить точку маршрута</button>

    <div class="form-group">
        <label asp-for="Notes" class="control-label"></label>
        <textarea asp-for="Notes" class="form-control"></textarea>
        <span asp-validation-for="Notes" class="text-danger"></span>
    </div>
    <div class="form-group mt-3">
        <input type="submit" value="Сохранить" class="btn btn-primary" />
        <a href="@Url.Action("Routes", "Route")" class="btn btn-secondary">Отмена</a>
    </div>
</form>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const addRoutePointButton = document.getElementById('addRoutePointRow');
            const tableBody = document.getElementById('routePointsTableBody');
            let routePointIndex = @(Model.RoutePointMappings?.Count() ?? 0);

            // Добавляем обработчики для существующих кнопок удаления
            document.querySelectorAll('.removeRoutePointRow').forEach(button => {
                button.addEventListener('click', function() {
                    const row = this.closest('tr');
                    tableBody.removeChild(row);
                    updateOrderNumbers();
                });
            });

            addRoutePointButton.addEventListener('click', function () {
                const newRow = document.createElement('tr');
                newRow.innerHTML = `
                    <td>
                        <select name="selectedRoutePointIds" class="form-control routePointSelect" onchange="updateOrder(this)">
                            <option value="">Выберите точку маршрута</option>
        @foreach (var routePoint in ViewBag.AvailableRoutePoints as List<SmartLoad.Models.RoutePoint>)
        {
                                    <option value="@routePoint.Id">@routePoint.Name</option>
        }
                        </select>
                    </td>
                    <td>
                        <input type="text" class="form-control orderName" readonly />
                        <input type="hidden" class="orderId" value="" />
                    </td>
                    <td>
                        <input type="number" name="orderInRoute" class="form-control orderNumber" value="${routePointIndex + 1}" min="1" />
                    </td>
                    <td>
                        <button type="button" class="btn btn-danger removeRoutePointRow">Удалить</button>
                    </td>
                `;
                tableBody.appendChild(newRow);
                newRow.querySelector('.removeRoutePointRow').addEventListener('click', function () {
                    tableBody.removeChild(newRow);
                    updateOrderNumbers(); // Обновляем порядковые номера после удаления
                });
                routePointIndex++;
            });

            // Функция для обновления порядковых номеров
            function updateOrderNumbers() {
                const orderInputs = document.querySelectorAll('.orderNumber');
                orderInputs.forEach((input, index) => {
                    input.value = index + 1;
                });
            }
        });

        function updateOrder(selectElement) {
            const selectedId = selectElement.value;
            const row = selectElement.closest('tr');
            const orderNameInput = row.querySelector('.orderName');
            const orderIdInput = row.querySelector('.orderId');

            if (selectedId) {
                $.ajax({
                    url: '@Url.Action("GetOrderByRoutePoint", "Route")',
                    type: 'GET',
                    data: { routePointId: selectedId },
                    success: function (data) {
                        orderNameInput.value = data.name;
                        orderIdInput.value = data.id;
                    }
                });
            } else {
                orderNameInput.value = '';
                orderIdInput.value = '';
            }
        }
    </script>
}
