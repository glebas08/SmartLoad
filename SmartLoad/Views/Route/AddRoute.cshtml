@model SmartLoad.Models.Rout

<h1>Добавить маршрут</h1>

<style>
    select[multiple] {
        height: auto;
        min-height: 100px;
    }

    .orderContainer {
        margin-bottom: 10px;
    }
</style>

<form asp-action="AddRoute" method="post">
    <!-- Название маршрута -->
    <div class="form-group">
        <label asp-for="Name" class="control-label">Название маршрута</label>
        <input asp-for="Name" class="form-control" />
        <span asp-validation-for="Name" class="text-danger"></span>
    </div>

    <!-- Даты маршрута -->
    <div class="form-group">
        <label asp-for="DepartureDate" class="control-label">Дата отправления</label>
        <input asp-for="DepartureDate" class="form-control" type="date" />
        <span asp-validation-for="DepartureDate" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="ArrivalDate" class="control-label">Дата прибытия</label>
        <input asp-for="ArrivalDate" class="form-control" type="date" />
        <span asp-validation-for="ArrivalDate" class="text-danger"></span>
    </div>

    <!-- Таблица для точек маршрута -->
    <h2>Точки маршрута</h2>
    <table class="table">
        <thead>
            <tr>
                <th>Название точки</th>
                <th>Заказы</th>
                <th>Порядок</th>
                <th>Действия</th>
            </tr>
        </thead>
        <tbody id="routePointsTableBody">
            <!-- Здесь будут добавляться строки точек маршрута -->
        </tbody>
    </table>

    <button type="button" class="btn btn-success" id="addRoutePointRow">Добавить точку маршрута</button>

    <!-- Примечания -->
    <div class="form-group">
        <label asp-for="Notes" class="control-label">Примечания</label>
        <textarea asp-for="Notes" class="form-control"></textarea>
        <span asp-validation-for="Notes" class="text-danger"></span>
    </div>

    <div class="form-group mt-3">
        <button type="submit" class="btn btn-primary">Сохранить</button>
        <a href="@Url.Action("Routes", "Route")" class="btn btn-secondary">Отмена</a>
    </div>
</form>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const addRoutePointButton = document.getElementById('addRoutePointRow');
            const tableBody = document.getElementById('routePointsTableBody');
            let routePointIndex = 0;

            addRoutePointButton.addEventListener('click', function () {
                const newRow = document.createElement('tr');
                newRow.innerHTML = `
                    <td>
                        <select name="selectedRoutePointIds" class="form-control routePointSelect" onchange="updateOrders(this, ${routePointIndex})">
                            <option value="">Выберите точку маршрута</option>
        @foreach (var routePoint in ViewBag.AvailableRoutePoints as List<SmartLoad.Models.RoutePoint>)
        {
                                    <option value="@routePoint.Id">@routePoint.Name</option>
        }
                        </select>
                    </td>
                    <td>
                        <div class="orderContainer" id="orderContainer_${routePointIndex}"></div>
                    </td>
                    <td>
                        <input type="number" name="orderInRoute" class="form-control orderNumber" value="${routePointIndex + 1}" min="1" />
                    </td>
                    <td>
                        <button type="button" class="btn btn-danger removeRoutePointRow">Удалить</button>
                    </td>
                `;
                tableBody.appendChild(newRow);
                newRow.querySelector('.removeRoutePointRow').addEventListener('click', function () {
                    tableBody.removeChild(newRow);
                    updateOrderNumbers(); // Обновляем порядковые номера после удаления
                });
                routePointIndex++;
            });

            // Функция для обновления порядковых номеров
            function updateOrderNumbers() {
                const orderInputs = document.querySelectorAll('.orderNumber');
                orderInputs.forEach((input, index) => {
                    input.value = index + 1;
                });
            }
        });

        function updateOrders(selectElement, index) {
            const selectedId = selectElement.value;
            const row = selectElement.closest('tr');
            const orderContainer = row.querySelector('.orderContainer');

            if (selectedId) {
                $.ajax({
                    url: '@Url.Action("GetOrdersByRoutePoint", "Route")',
                    type: 'GET',
                    data: { routePointId: selectedId },
                    success: function (data) {
                        orderContainer.innerHTML = '';

                        if (data.length > 0) {
                            const orderSelect = document.createElement('select');
                            orderSelect.className = 'form-control';
                            orderSelect.name = `selectedOrderIds[${index}][]`; // Добавляем [] для передачи массива
                            orderSelect.multiple = true;
                            orderSelect.size = Math.min(data.length, 5); // Отображаем до 5 опций одновременно

                            data.forEach(order => {
                                const option = document.createElement('option');
                                option.value = order.id;
                                option.text = order.name;
                                option.selected = true; // По умолчанию выбираем все заказы
                                orderSelect.appendChild(option);
                            });

                            // Добавляем подсказку
                            const helpText = document.createElement('small');
                            helpText.className = 'form-text text-muted';
                            helpText.textContent = 'Удерживайте Ctrl для выбора нескольких заказов';

                            orderContainer.appendChild(orderSelect);
                            orderContainer.appendChild(helpText);
                        } else {
                            orderContainer.innerHTML = '<span class="text-muted">Нет заказов</span>';
                        }
                    },
                    error: function(xhr, status, error) {
                        console.error('Ошибка при получении заказов:', error);
                        orderContainer.innerHTML = '<span class="text-danger">Ошибка при загрузке заказов</span>';
                    }
                });
            } else {
                orderContainer.innerHTML = '';
            }
        }
    </script>
}
