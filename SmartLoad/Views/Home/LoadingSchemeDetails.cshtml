@model IEnumerable<SmartLoad.Models.LoadingProduct>

@{
    ViewData["Title"] = "Детали схемы погрузки";
    var loadingSchemeId = ViewBag.LoadingSchemeId;
    var loadingScheme = ViewBag.LoadingScheme as SmartLoad.Models.LoadingScheme;
}

<h1>Детали схемы погрузки: @(loadingScheme?.VehicleType.Name ?? "Неизвестный тип ТС")</h1>

<div>
    <h4>Информация о схеме погрузки</h4>
    <hr />
    <dl class="row">
        <dt class="col-sm-2">
            Дата загрузки
        </dt>
        <dd class="col-sm-10">
            @(loadingScheme?.LoadingDate.ToString("dd.MM.yyyy") ?? "Неизвестная дата")
        </dd>
        <dt class="col-sm-2">
            Статус
        </dt>
        <dd class="col-sm-10">
            @(loadingScheme?.Status ?? "Неизвестный статус")
        </dd>
        <dt class="col-sm-2">
            Примечания
        </dt>
        <dd class="col-sm-10">
            @(loadingScheme?.Notes ?? "Нет примечаний")
        </dd>
    </dl>
</div>

<h2>Продукты в схеме погрузки</h2>

<a href="@Url.Action("AddLoadingProduct", "HomeAsp", new { loadingSchemeId })" class="btn btn-success">Добавить продукт</a>
@* <a href="@Url.Action("LoadingSchemes", "HomeAsp", new { routeId = loadingScheme?.RouteId })" class="btn btn-secondary">Назад к схемам погрузки</a> *@

<div style="overflow-x: auto; max-height: auto">
    <table class="table table-striped table-bordered">
        <thead>
            <tr>
                <th>ID</th>
                <th>Продукт</th>
                <th>Количество</th>
                <th>Позиция X (м)</th>
                <th>Позиция Y (м)</th>
                <th>Позиция Z (м)</th>
                <th>Действия</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in Model)
            {
                <tr>
                    <td>@product.Id</td>
                    <td>@product.Product.Name</td>
                    <td>@product.Quantity</td>
                    <td>@product.PositionX</td>
                    <td>@product.PositionY</td>
                    <td>@product.PositionZ</td>
                    <td>
                        <a asp-action="EditLoadingProduct" asp-route-id="@product.Id" asp-route-loadingSchemeId="@loadingSchemeId" class="btn btn-primary">Редактировать</a>
                        <a asp-action="DeleteLoadingProduct" asp-route-id="@product.Id" asp-route-loadingSchemeId="@loadingSchemeId" class="btn btn-danger">Удалить</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<h2>Визуализация схемы погрузки</h2>

<svg id="loadingSchemeSvg" width="800" height="400" style="border: 1px solid black;">
    <!-- Здесь будет отображаться визуализация -->
</svg>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const svg = document.getElementById('loadingSchemeSvg');
            const loadingSchemeId = @loadingSchemeId;

            fetch(`/HomeAsp/GetLoadingSchemeDetails?id=${loadingSchemeId}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP error! Status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.success === false) {
                        alert(data.message);
                        return;
                    }

                    const vehicleType = data.vehicleType;
                    const loadingProducts = data.loadingProducts;

                    // Очистка SVG
                    svg.innerHTML = '';

                    // Создание прямоугольника для прицепа
                    const trailerRect = document.createElementNS("http://www.w3.org/2000/svg", "rect");
                    trailerRect.setAttribute("x", "50");
                    trailerRect.setAttribute("y", "50");
                    trailerRect.setAttribute("width", `${vehicleType.TrailerLength * 10}`); // Увеличиваем размеры для наглядности
                    trailerRect.setAttribute("height", `${vehicleType.TrailerWidth * 10}`);
                    trailerRect.setAttribute("fill", "lightgray");
                    trailerRect.setAttribute("stroke", "black");
                    svg.appendChild(trailerRect);

                    // Добавление продуктов
                    loadingProducts.forEach(product => {
                        const rect = document.createElementNS("http://www.w3.org/2000/svg", "rect");
                        rect.setAttribute("x", `${(product.PositionX * 10) + 50}`);
                        rect.setAttribute("y", `${(product.PositionY * 10) + 50}`);
                        rect.setAttribute("width", `${product.packagingType.Length * 10}`);
                        rect.setAttribute("height", `${product.packagingType.Width * 10}`);
                        rect.setAttribute("fill", "blue");
                        rect.setAttribute("stroke", "black");
                        svg.appendChild(rect);

                        const text = document.createElementNS("http://www.w3.org/2000/svg", "text");
                        text.setAttribute("x", `${(product.PositionX * 10) + 50 + (product.packagingType.Length * 5)}`);
                        text.setAttribute("y", `${(product.PositionY * 10) + 50 + (product.packagingType.Width * 5)}`);
                        text.setAttribute("fill", "white");
                        text.setAttribute("text-anchor", "middle");
                        text.textContent = product.product.Name;
                        svg.appendChild(text);
                    });
                })
                .catch(error => {
                    console.error('Error fetching loading scheme details:', error);
                    alert('Произошла ошибка при загрузке данных схемы погрузки.');
                });
        });
    </script>
}