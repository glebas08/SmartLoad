@model IEnumerable<SmartLoad.Models.LoadingProduct>
@{
    ViewData["Title"] = "Продукты в схеме погрузки";
    var loadingSchemeId = ViewBag.LoadingSchemeId;
    var loadingScheme = ViewBag.LoadingScheme as SmartLoad.Models.LoadingScheme;
}

<h1>Продукты в схеме погрузки: @(loadingScheme?.VehicleType.Name ?? "Неизвестный тип ТС")</h1>

<a href="@Url.Action("AddLoadingProduct", "Home", new { loadingSchemeId })" class="btn btn-success">Добавить продукт</a>
<a href="@Url.Action("LoadingSchemes", "Home")" class="btn btn-secondary">Назад к схемам погрузки</a>

<div style="overflow-x: auto; max-height: auto">
    <table class="table table-striped table-bordered">
        <thead>
            <tr>
                <th>ID</th>
                <th>Продукт</th>
                <th>Количество</th>
                <th>Позиция X (м)</th>
                <th>Позиция Y (м)</th>
                <th>Позиция Z (м)</th>
                <th>Действия</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in Model)
            {
                <tr>
                    <td>@product.Id</td>
                    <td>@product.Product.Name</td>
                    <td>@product.Quantity</td>
                    <td>@product.PositionX</td>
                    <td>@product.PositionY</td>
                    <td>@product.PositionZ</td>
                    <td>
                        <a asp-action="EditLoadingProduct" asp-controller="Home" asp-route-id="@product.Id" asp-route-loadingSchemeId="@loadingSchemeId" class="btn btn-primary">Редактировать</a>
                        <a asp-action="DeleteLoadingProduct" asp-controller="Home" asp-route-id="@product.Id" asp-route-loadingSchemeId="@loadingSchemeId" class="btn btn-danger">Удалить</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<h2>Визуализация схемы погрузки</h2>
<svg id="loadingSchemeSvg" width="800" height="400" style="border: 1px solid black;">
    <!-- Здесь будет отображаться визуализация -->.
    <!--<rect x="0" y="0" width="30" height="50" />-->
</svg>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
            document.addEventListener('DOMContentLoaded', function () {
            const svg = document.getElementById('loadingSchemeSvg');
            const loadingSchemeId = @loadingSchemeId;
            fetch(`/Home/GetLoadingSchemeDetails?id=${loadingSchemeId}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`Network response was not ok: ${response.statusText}`);
                    }
                    return response.json();
                })
                .then(data => {
                    console.log('Полученные данные:', data);
                    const vehicleType = data.vehicleType;
                    const loadingProducts = data.loadingProducts;

                    console.log('Данные о прицепе:', vehicleType);
                    console.log('Данные о продуктах:', loadingProducts);

                    // Проверка наличия vehicleType
                    if (!vehicleType) {
                        console.error('Данные о прицепе отсутствуют');
                        return;
                    }

                    // Очистка SVG
                    svg.innerHTML = '';
                    // console.log('Посмотрим что  лежит тут  ', data.vehicleType.trailerLength);
                    // // Просто рисуем квадрат
                    // const provRect = document.createElementNS("http://www.w3.org/2000/svg", "rect");
                    // provRect.setAttribute("x", "0");
                    // provRect.setAttribute("y", "0");
                    // provRect.setAttribute("width", "30");
                    // provRect.setAttribute("height", "25");
                    // provRect.setAttribute("fill", "red");
                    // provRect.setAttribute("stroke", "black");
                    // svg.appendChild(provRect);

                    // Создание прямоугольника для прицепа
                    const trailerRect = document.createElementNS("http://www.w3.org/2000/svg", "rect");
                    trailerRect.setAttribute("x", "50");
                    trailerRect.setAttribute("y", "50");
                    trailerRect.setAttribute("width", `${data.vehicleType.trailerLength * 50}`); // Увеличиваем размеры для наглядности
                    trailerRect.setAttribute("height", `${data.vehicleType.trailerWidth * 50}`);
                    trailerRect.setAttribute("fill", "lightgray");
                    trailerRect.setAttribute("stroke", "black");
                    svg.appendChild(trailerRect);
                    
                    console.log('тут должна быть отрисовка прямоугольника');

                    // Создание массива случайных цветов
                    const colors = [
                        "#3498db", // Синий
                        "#2ecc71", // Зелёный
                        "#e74c3c", // Красный
                        "#f39c12", // Оранжевый
                        "#9b59b6", // Фиолетовый
                        "#1abc9c", // Бирюзовый
                        "#34495e", // Темно-синий
                        "#16a085", // Светло-бирюзовый
                        "#27ae60", // Светло-зелёный
                        "#2980b9", // Светло-синий
                        "#8e44ad", // Темно-фиолетовый
                        "#2c3e50", // Темно-синий
                        "#e67e22", // Оранжевый
                        "#c0392b", // Темно-красный
                        "#95a5a6", // Серый
                        "#d35400", // Темно-оранжевый
                        "#7f8c8d", // Серый
                        "#273c75", // Темно-синий
                        "#17202a", // Очень темно-синий
                        "#2471a3"  // Светло-синий
                    ];

                    // Добавление продуктов
            loadingProducts.forEach((product, index) => {
                console.log(`Продукт ${index + 1}:`, product);

                // Проверка наличия packagingType
                if (!product.packagingType) {
                    console.error(`Тип упаковки для продукта ${product.product.Name} отсутствует`);
                    return;
                }

                // Определение сдвига для продуктов
                const offsetX = 30; // Сдвиг по оси X
                const offsetY = 0; // Сдвиг по оси Y

                // Расчет позиции с учетом сдвига
                const x = (product.positionX * 10) + 50 + (offsetX * index);
                const y = (product.positionY * 10) + 50 + (offsetY * index);

                const rect = document.createElementNS("http://www.w3.org/2000/svg", "rect");
                rect.setAttribute("x", x);
                rect.setAttribute("y", y);
                rect.setAttribute("width", `${product.packagingType.length * 50}`);
                rect.setAttribute("height", `${product.packagingType.width * 70}`);
                rect.setAttribute("fill", colors[index % colors.length]); // Используем циклический выбор цветов
                rect.setAttribute("stroke", "black");
                svg.appendChild(rect);

                // Расчет позиции текста над квадратом
                const textX = x + (product.packagingType.length * 25); // Центр квадрата по оси X
                const textY = y + 30; // Над квадратом с отступом 10

                const text = document.createElementNS("http://www.w3.org/2000/svg", "text");
                text.setAttribute("x", textX);
                text.setAttribute("y", textY);
                text.setAttribute("fill", "white");
                text.setAttribute("text-anchor", "middle");
                text.setAttribute("font-size", "12"); // Размер шрифта
                text.textContent = product.product.name;
                svg.appendChild(text);
            });
        })
        .catch(error => {
            console.error('Ошибка при получении данных о схеме погрузки:', error);
        });
        });
    </script>
}






@* @model IEnumerable<SmartLoad.Models.LoadingProduct>
@{
    ViewData["Title"] = "Продукты в схеме погрузки";
    var loadingSchemeId = ViewBag.LoadingSchemeId;
    var loadingScheme = ViewBag.LoadingScheme as SmartLoad.Models.LoadingScheme;
}

<h1>Продукты в схеме погрузки: @(loadingScheme?.VehicleType.Name ?? "Неизвестный тип ТС")</h1>

<a href="@Url.Action("AddLoadingProduct", "Home", new { loadingSchemeId })" class="btn btn-success">Добавить продукт</a>
<a href="@Url.Action("LoadingSchemes", "Home")" class="btn btn-secondary">Назад к схемам погрузки</a>

<div style="overflow-x: auto; max-height: auto">
    <table class="table table-striped table-bordered">
        <thead>
            <tr>
                <th>ID</th>
                <th>Продукт</th>
                <th>Количество</th>
                <th>Позиция X (м)</th>
                <th>Позиция Y (м)</th>
                <th>Позиция Z (м)</th>
                <th>Действия</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in Model)
            {
                <tr>
                    <td>@product.Id</td>
                    <td>@product.Product.Name</td>
                    <td>@product.Quantity</td>
                    <td>@product.PositionX</td>
                    <td>@product.PositionY</td>
                    <td>@product.PositionZ</td>
                    <td>
                        <a asp-action="EditLoadingProduct" asp-controller="Home" asp-route-id="@product.Id" asp-route-loadingSchemeId="@loadingSchemeId" class="btn btn-primary">Редактировать</a>
                        <a asp-action="DeleteLoadingProduct" asp-controller="Home" asp-route-id="@product.Id" asp-route-loadingSchemeId="@loadingSchemeId" class="btn btn-danger">Удалить</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<h2>Визуализация схемы погрузки</h2>
<svg id="loadingSchemeSvg" width="800" height="400" style="border: 1px solid black;">
    <!-- Здесь будет отображаться визуализация -->
</svg>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const svg = document.getElementById('loadingSchemeSvg');
            const loadingSchemeId = @loadingSchemeId;

            fetch(`/Home/GetLoadingSchemeDetails?id=${loadingSchemeId}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.success === false) {
                        console.error(data.message);
                        return;
                    }

                    const vehicleType = data.vehicleType;
                    const loadingProducts = data.loadingProducts;

                    // Очистка SVG
                    svg.innerHTML = '';

                    // Создание прямоугольника для прицепа
                    const trailerRect = document.createElementNS("http://www.w3.org/2000/svg", "rect");
                    trailerRect.setAttribute("x", "50");
                    trailerRect.setAttribute("y", "50");
                    trailerRect.setAttribute("width", `${vehicleType.TrailerLength * 10}`); // Увеличиваем размеры для наглядности
                    trailerRect.setAttribute("height", `${vehicleType.TrailerWidth * 10}`);
                    trailerRect.setAttribute("fill", "red"); // Устанавливаем цвет на красный
                    trailerRect.setAttribute("stroke", "red ");
                    svg.appendChild(trailerRect);

                    // Создание массива случайных цветов
                    const colors = [
                        "#3498db", // Синий
                        "#2ecc71", // Зелёный
                        "#e74c3c", // Красный
                        "#f39c12", // Оранжевый
                        "#9b59b6", // Фиолетовый
                        "#1abc9c", // Бирюзовый
                        "#34495e", // Темно-синий
                        "#16a085", // Светло-бирюзовый
                        "#27ae60", // Светло-зелёный
                        "#2980b9", // Светло-синий
                        "#8e44ad", // Темно-фиолетовый
                        "#2c3e50", // Темно-синий
                        "#e67e22", // Оранжевый
                        "#c0392b", // Темно-красный
                        "#95a5a6", // Серый
                        "#d35400", // Темно-оранжевый
                        "#7f8c8d", // Серый
                        "#273c75", // Темно-синий
                        "#17202a", // Очень темно-синий
                        "#2471a3"  // Светло-синий
                    ];

                    // Добавление продуктов
                    loadingProducts.forEach((product, index) => {
                        if (product.packagingType) {
                            const rect = document.createElementNS("http://www.w3.org/2000/svg", "rect");
                            rect.setAttribute("x", `${(product.PositionX * 10) + 50}`);
                            rect.setAttribute("y", `${(product.PositionY * 10) + 50}`);
                            rect.setAttribute("width", `${product.packagingType.Length * 10}`);
                            rect.setAttribute("height", `${product.packagingType.Width * 10}`);
                            rect.setAttribute("fill", colors[index % colors.length]); // Используем циклический выбор цветов
                            rect.setAttribute("stroke", "black");
                            svg.appendChild(rect);

                            const text = document.createElementNS("http://www.w3.org/2000/svg", "text");
                            text.setAttribute("x", `${(product.PositionX * 10) + 50 + (product.packagingType.Length * 5)}`);
                            text.setAttribute("y", `${(product.PositionY * 10) + 50 + (product.packagingType.Width * 5)}`);
                            text.setAttribute("fill", "white");
                            text.setAttribute("text-anchor", "middle");
                            text.textContent = product.product.Name;
                            svg.appendChild(text);
                        } else {
                            console.error(`Тип упаковки для продукта с ID ${product.Id} не найден`);
                        }
                    });
                })
                .catch(error => {
                    console.error('Ошибка при получении данных о схеме погрузки:', error);
                });
        });
    </script>
} *@